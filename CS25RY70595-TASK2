import tkinter as tk
from tkinter import messagebox

class CoolTicTacToeAI:
    def __init__(self, root):
        self.root = root
        self.root.title("Nexi Tic-Tac-Toe")
        self.root.configure(bg="#1e1e2f")
        self.root.geometry("400x450")
        self.board = ['' for _ in range(9)]
        self.current_player = "X"  # Human
        self.buttons = []
        self.status_label = tk.Label(
            self.root, text="Your turn (X)", font=("Helvetica", 16),
            bg="#1e1e2f", fg="#ffffff"
        )
        self.status_label.pack(pady=10)
        self.create_board()

    def create_board(self):
        frame = tk.Frame(self.root, bg="#1e1e2f")
        frame.pack()
        for i in range(9):
            button = tk.Button(
                frame, text="", font=("Helvetica", 28, "bold"),
                width=5, height=2, bg="#2e2e3e", fg="#ffffff",
                activebackground="#3e3e5e", borderwidth=0,
                command=lambda idx=i: self.on_click(idx)
            )
            button.grid(row=i // 3, column=i % 3, padx=5, pady=5)
            self.buttons.append(button)

    def on_click(self, index):
        if self.board[index] == '' and self.current_player == "X":
            self.board[index] = "X"
            self.buttons[index].config(text="X", state="disabled", disabledforeground="#00d0ff")
            if self.check_winner(self.board, "X"):
                self.end_game("You win.")
            elif '' not in self.board:
                self.end_game("It's a tie.")
            else:
                self.current_player = "O"
                self.status_label.config(text="AI's turn (O)")
                self.root.after(400, self.ai_move)

    def ai_move(self):
        best_score = float('-inf')
        best_move = None
        for i in range(9):
            if self.board[i] == '':
                self.board[i] = 'O'
                score = self.minimax(self.board, 0, False)
                self.board[i] = ''
                if score > best_score:
                    best_score = score
                    best_move = i
        if best_move is not None:
            self.board[best_move] = 'O'
            self.buttons[best_move].config(text="O", state="disabled", disabledforeground="#ff4b5c")
            if self.check_winner(self.board, "O"):
                self.end_game("AI wins.")
            elif '' not in self.board:
                self.end_game("It's a tie.")
            else:
                self.current_player = "X"
                self.status_label.config(text="Your turn (X)")

    def minimax(self, board, depth, is_maximizing):
        if self.check_winner(board, "O"):
            return 1
        elif self.check_winner(board, "X"):
            return -1
        elif '' not in board:
            return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'O'
                    score = self.minimax(board, depth + 1, False)
                    board[i] = ''
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'X'
                    score = self.minimax(board, depth + 1, True)
                    board[i] = ''
                    best_score = min(score, best_score)
            return best_score

    def check_winner(self, board, player):
        wins = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),
            (0, 3, 6), (1, 4, 7), (2, 5, 8),
            (0, 4, 8), (2, 4, 6)
        ]
        return any(board[a] == board[b] == board[c] == player for a, b, c in wins)

    def end_game(self, result):
        self.status_label.config(text=result)
        messagebox.showinfo("Game Over", result)
        self.reset_game()

    def reset_game(self):
        self.board = ['' for _ in range(9)]
        for button in self.buttons:
            button.config(text="", state="normal")
        self.current_player = "X"
        self.status_label.config(text="Your turn (X)")

if __name__ == "__main__":
    root = tk.Tk()
    app = CoolTicTacToeAI(root)
    root.mainloop()
